} else {
warning(paste0("The tmp_cost function ", cost_f, "is not implemented. Generalized Kullback-Leibler will be used."))
tmp_cost <- gklDiv(as.vector(data[-train_set,]), as.vector(res_nb$E[-train_set,ord] %*% h_train))
}
tmp_cost
}
n_iterations=100
cost <- foreach(i=1:n_iterations, .combine=c, .packages=c('SQUAREM'), .export = ls(globalenv())) %dopar% {
set.seed(i)
n <- nrow(data)
train_set = sample(1:n, size_train*n)
res_train <- NMFPois(M=data[train_set,], N=k, tol = tol)
h_train <- res_train$P
ord <- corSig(h_train,res_nb$P)$match
if (cost_f=="GKL"){
tmp_cost <- gklDiv(as.vector(data[-train_set,]), as.vector(res_nb$E[-train_set,ord] %*% h_train))
} else if (cost_f=="Frobenius"){
tmp_cost = sqrt(sum((data[-train_set,]-(res_nb$E[-train_set,ord] %*% h_train))^2))
} else if (cost_f=="IS"){
a_div = as.vector(data[-train_set,])
b_div = as.vector(res_nb$E[-train_set,ord] %*% h_train)
zeros <- which(a_div>0)
tmp_costIS <- b_div
tmp_costIS[zeros] <- (a_div/b_div - log(a_div/b_div))[zeros]
tmp_cost <- sum(tmp_costIS)
} else {
warning(paste0("The tmp_cost function ", cost_f, "is not implemented. Generalized Kullback-Leibler will be used."))
tmp_cost <- gklDiv(as.vector(data[-train_set,]), as.vector(res_nb$E[-train_set,ord] %*% h_train))
}
tmp_cost
}
size_train=0.9
cost <- foreach(i=1:n_iterations, .combine=c, .packages=c('SQUAREM'), .export = ls(globalenv())) %dopar% {
set.seed(i)
n <- nrow(data)
train_set = sample(1:n, size_train*n)
res_train <- NMFPois(M=data[train_set,], N=k, tol = tol)
h_train <- res_train$P
ord <- corSig(h_train,res_nb$P)$match
if (cost_f=="GKL"){
tmp_cost <- gklDiv(as.vector(data[-train_set,]), as.vector(res_nb$E[-train_set,ord] %*% h_train))
} else if (cost_f=="Frobenius"){
tmp_cost = sqrt(sum((data[-train_set,]-(res_nb$E[-train_set,ord] %*% h_train))^2))
} else if (cost_f=="IS"){
a_div = as.vector(data[-train_set,])
b_div = as.vector(res_nb$E[-train_set,ord] %*% h_train)
zeros <- which(a_div>0)
tmp_costIS <- b_div
tmp_costIS[zeros] <- (a_div/b_div - log(a_div/b_div))[zeros]
tmp_cost <- sum(tmp_costIS)
} else {
warning(paste0("The tmp_cost function ", cost_f, "is not implemented. Generalized Kullback-Leibler will be used."))
tmp_cost <- gklDiv(as.vector(data[-train_set,]), as.vector(res_nb$E[-train_set,ord] %*% h_train))
}
tmp_cost
}
i=1
set.seed(i)
n <- nrow(data)
train_set = sample(1:n, size_train*n)
res_train <- NMFPois(M=data[train_set,], N=k, tol = tol)
h_train <- res_train$P
ord <- corSig(h_train,res_nb$P)$match
if (cost_f=="GKL"){
tmp_cost <- gklDiv(as.vector(data[-train_set,]), as.vector(res_nb$E[-train_set,ord] %*% h_train))
} else if (cost_f=="Frobenius"){
tmp_cost = sqrt(sum((data[-train_set,]-(res_nb$E[-train_set,ord] %*% h_train))^2))
} else if (cost_f=="IS"){
a_div = as.vector(data[-train_set,])
b_div = as.vector(res_nb$E[-train_set,ord] %*% h_train)
zeros <- which(a_div>0)
tmp_costIS <- b_div
tmp_costIS[zeros] <- (a_div/b_div - log(a_div/b_div))[zeros]
tmp_cost <- sum(tmp_costIS)
} else {
warning(paste0("The tmp_cost function ", cost_f, "is not implemented. Generalized Kullback-Leibler will be used."))
tmp_cost <- gklDiv(as.vector(data[-train_set,]), as.vector(res_nb$E[-train_set,ord] %*% h_train))
}
tmp_cost <- gklDiv(as.vector(data[-train_set,]), as.vector(res_nb$E[-train_set,ord] %*% h_train))
gklDiv <- function(y, mu){
r <- mu
p <- which(y > 0)
r[p] <- (y * (log(y)- log(mu)) - y + mu)[p]
return(sum(r))
}
tmp_cost <- gklDiv(as.vector(data[-train_set,]), as.vector(res_nb$E[-train_set,ord] %*% h_train))
dim(res_nb$E)
ord
H1=h_train
H2=res_nb$P
dist <- cor(H1,H2)
dim(H1)
dist <- cor(H1,H2)
K <- nrow(H1)
m <- numeric(K)
distmat = dist
for(s in 1:K){
max.dist <- max(dist)
remove = which(dist == max.dist, arr.ind = TRUE)
dist[,remove[1,1]] <- -2
dist[remove[1,2],] <- -2
m[remove[1,1]] <- remove[1,2]
}
m
dist <- cor(H1,H2)
K <- nrow(H1)
m <- numeric(K)
m
s=1
max.dist <- max(dist)
remove = which(dist == max.dist, arr.ind = TRUE)
dim(dist)
dist <- cor(t(H1),t(H2))
K <- nrow(H1)
m <- numeric(K)
distmat = dist
for(s in 1:K){
max.dist <- max(dist)
remove = which(dist == max.dist, arr.ind = TRUE)
dist[,remove[1,1]] <- -2
dist[remove[1,2],] <- -2
m[remove[1,1]] <- remove[1,2]
}
m
dist <- cor(t(H1),t(H2))
K <- nrow(H1)
m <- numeric(K)
distmat = dist
for(s in 1:K){
max.dist <- max(dist)
remove = which(dist == max.dist, arr.ind = TRUE)
dist[remove[1,1],] <- -2
dist[,remove[1,2]] <- -2
m[remove[1,1]] <- remove[1,2]
}
m
ord <- corSig(h_train,res_nb$P)$match
#'
#'
#' @param H1 Numeric matrix of mutational signatures. Each column should represent a signature.
#' @param H2 Numeric matrix of mutational signatures. Each column should represent a signature.
#'
#'
#' @return Vector of indexes to reorder the second matrix to match the first one.
#' Also returns the full correlation matrix between the signatures.
#'
#' @export
corSig <- function(H1, H2){
if (!all.equal(dim(H1),dim(H2))){
stop("The two signature matrices need to have the same dimensions")
}
dist <- cor(t(H1),t(H2))
K <- nrow(H1)
m <- numeric(K)
distmat = dist
for(s in 1:K){
max.dist <- max(dist)
remove = which(dist == max.dist, arr.ind = TRUE)
dist[remove[1,1],] <- -2
dist[,remove[1,2]] <- -2
m[remove[1,1]] <- remove[1,2]
}
Output <- list()
Output$distmat <- distmat      # the distance matrix of correlations
Output$match <- as.integer(m)  # the best matched signatures
return(Output)
}
ord <- corSig(h_train,res_nb$P)$match
tmp_cost <- gklDiv(as.vector(data[-train_set,]), as.vector(res_nb$E[-train_set,ord] %*% h_train))
tmp_cost = sqrt(sum((data[-train_set,]-(res_nb$E[-train_set,ord] %*% h_train))^2))
a_div = as.vector(data[-train_set,])
b_div = as.vector(res_nb$E[-train_set,ord] %*% h_train)
zeros <- which(a_div>0)
tmp_costIS <- b_div
tmp_costIS[zeros] <- (a_div/b_div - log(a_div/b_div))[zeros]
tmp_cost <- sum(tmp_costIS)
res2 <-  sigmos(t(SimulatedDataNBalpha200[[1]]),k=5,method = "Poisson")
remove.packages("SigMoS", lib="~/R/x86_64-pc-linux-gnu-library/4.2")
devtools::install_github("MartaPelizzola/SigMoS")
library(SigMoS)
res <- NMFPois(t(SimulatedDataNBalpha200[[1]]),5)
res2 <-  sigmos(t(SimulatedDataNBalpha200[[1]]),k=5,method = "Poisson")
res2$cost
res2$cost_k
res2$Signatures
res2$Exposures
alpha <- alphaNR(t(SimulatedDataNBalpha200[[1]]),5)
alpha
#' @param data Numeric matrix of mutational counts data. Matrix size: no. of mutation types x no. of patients.
#' @param k Number of signatures to be used for the non-negative matrix factorization
#' @param patient_specific Logical. If TRUE patient-specific overdispersion is used in the Negative Binomial model.
#'
#'
#' @return Overdispersion parameter. Either vector of length one or vector of length no. of patients if patient-specific overdispersion is used.
#'
#' @export
#'
#'
alphaNR2 <- function(data, k=NULL, patient_specific = FALSE){
if (k!=round(k)){
stop("The number of signatures must be an integer.")
}
if(is.null(data)){
stop("The data set of the mutational counts is missing.")
}
if(is.null(k)){
stop("A value for the number of signatures to be estimated is missing.")
}
if(length(k)!=1){
stop("'k' has length larger than 1.")
}
res_p <- NMFPoisEM(data,k,tol = 1e-2,
seed = sample(100000,1))
h_p <- res_p$P
w_p <- res_p$E
# differentiated once
neglikdiff1 = function(alpha, data, estimate){
sum(digamma(data + alpha) - digamma(alpha) - data/(alpha+estimate) - alpha/(alpha+estimate) + log(alpha/(alpha+estimate)) + 1)
}
# differentiated twice
neglikdiff2 = function(alpha, data, estimate){
sum(trigamma(data + alpha) - trigamma(alpha) + data/(alpha+estimate)^2 + 1/alpha - 2/(alpha+estimate) + alpha/(alpha+estimate)^2)
}
NR_alpha = function(data,estimate){
alpha <- 1/var(data/estimate)
alphaold = alpha + 5
for(i in 1:10){
alpha = alpha - neglikdiff1(alpha, data = data, estimate = estimate)/neglikdiff2(alpha, data = data, estimate = estimate)
if(!(alpha > 0)){ alpha = runif(1,1,10)}
if(abs(alpha - alphaold) < 0.01) break
alphaold = alpha
}
return(alpha)
}
if(patient_specific){
alpha = numeric(ncol(data))
estimate = h_p%*%w_p
for(i in 1:ncol(data)){
alpha[i] = NR_alpha(data[,i],estimate[,i])
}
}else{
data = as.vector(data)
estimate = as.vector(h_p%*%w_p)
alpha = NR_alpha(data,estimate)
}
return(alpha)
}
alphaNR2(SimulatedDataNBalpha200[[1]], 5)
NMFPoisEM = function(M,N=NULL, tol = 1e-5, seed = sample(1:1000,1)){
if (N!=round(N)){
stop("The number of signatures must be an integer.")
}
if(is.null(M)){
stop("The data set of the mutational counts is missing.")
}
if(is.null(N)){
stop("A value for the number of signatures to be estimated is missing.")
}
if(length(N)!=1){
stop("More than one value for the number of signatures is used as input. NB-NMF can only be performed for one value of 'N' at a time.")
}
K <- dim(M)[1]  # mutations
G <- dim(M)[2]  # patients
div <- rep(0,length(seed)) # vector of different GKLD values
Plist <- list()            # list of P matrices
Elist <- list()            # list of E matrices
reslist <- list()
poisson_em = function(x){
x = exp(x)
P = matrix(x[1:(K*N)], nrow = K, ncol = N)
E = matrix(x[-c(1:(K*N))], nrow = N, ncol = G)
PE <- P%*%E
P <- P * ((M/PE) %*% t(E))      # update of signatures
P <- P %*% diag(1/colSums(P))   # make sure the columns sum to one
PE <- P%*%E
E <- E * (t(P) %*% (M/PE))      # update of exposures
par = c(as.vector(P),as.vector(E))
par[par <= 0] = 1e-10
return(log(par))
}
gklobj = function(x){
x = exp(x)
P = matrix(x[1:(K*N)], nrow = K, ncol = N)
E = matrix(x[-c(1:(K*N))], nrow = N, ncol = G)
GKL <- gklDiv(as.vector(M),as.vector(P%*%E)) # GKLD value
return(GKL)
}
for(i in 1:length(seed)){
set.seed(seed[i])
P <- matrix(runif(K*N), nrow = K, ncol = N)  # Initialize P
E <- matrix(runif(N*G), nrow = N, ncol = G)  # Initialize E
init = log(c(as.vector(P),as.vector(E)))
sres = squarem(init, fixptfn = poisson_em, objfn = gklobj, control = list(tol = tol))
P = matrix(exp(sres$par[1:(K*N)]), nrow = K, ncol = N)
E = matrix(exp(sres$par[-c(1:(K*N))]), nrow = N, ncol = G)
Plist[[i]] <- P # signatures
Elist[[i]] <- E # exposures
div[i] <- gklobj(sres$par)   # final generalized Kullback-Leibler divergence
reslist[[i]] = sres
}
best <- which.min(div) # Smallest GKLD value
P = Plist[[best]]
E = Elist[[best]]
Output <- list()
Output$P <-  P
Output$E <-  E
Output$gkl <- div[best]
Output$results <- reslist
return(Output)
}
gklDiv <- function(y, mu){
r <- mu
p <- which(y > 0)
r[p] <- (y * (log(y)- log(mu)) - y + mu)[p]
return(sum(r))
}
alphaNR2(SimulatedDataNBalpha200[[1]], 5)
library(SQUAREM)
alphaNR2(SimulatedDataNBalpha200[[1]], 5)
data=t(SimulatedDataNBalpha200[[1]])
k=5
res_p <- NMFPois(data,k,tol = 1e-2,
seed = sample(100000,1))
h_p <- res_p$P
w_p <- res_p$E
# differentiated once
neglikdiff1 = function(alpha, data, estimate){
sum(digamma(data + alpha) - digamma(alpha) - data/(alpha+estimate) - alpha/(alpha+estimate) + log(alpha/(alpha+estimate)) + 1)
}
# differentiated twice
neglikdiff2 = function(alpha, data, estimate){
sum(trigamma(data + alpha) - trigamma(alpha) + data/(alpha+estimate)^2 + 1/alpha - 2/(alpha+estimate) + alpha/(alpha+estimate)^2)
}
NR_alpha = function(data,estimate){
alpha <- 1/var(data/estimate)
alphaold = alpha + 5
for(i in 1:10){
alpha = alpha - neglikdiff1(alpha, data = data, estimate = estimate)/neglikdiff2(alpha, data = data, estimate = estimate)
if(!(alpha > 0)){ alpha = runif(1,1,10)}
if(abs(alpha - alphaold) < 0.01) break
alphaold = alpha
}
return(alpha)
}
data
dim(data)
dim(w_p%*%h_p)
alpha <- alphaNR(t(SimulatedDataNBalpha200[[1]]),5)
#' @param data Numeric matrix of mutational counts data. Matrix size: no. of patients x no. of mutation types.
#' @param k Number of signatures to be used for the non-negative matrix factorization
#' @param patient_specific Logical. If TRUE patient-specific overdispersion is used in the Negative Binomial model.
#'
#'
#' @return Overdispersion parameter. Either vector of length one or vector of length no. of patients if patient-specific overdispersion is used.
#'
#' @export
#'
#'
alphaNR3 <- function(data, k=NULL, patient_specific = FALSE){
if (k!=round(k)){
stop("The number of signatures must be an integer.")
}
if(is.null(data)){
stop("The data set of the mutational counts is missing.")
}
data <- t(data)
if(is.null(k)){
stop("A value for the number of signatures to be estimated is missing.")
}
if(length(k)!=1){
stop("'k' has length larger than 1.")
}
res_p <- NMFPois(data,k,tol = 1e-2,
seed = sample(100000,1))
h_p <- res_p$P
w_p <- res_p$E
# differentiated once
neglikdiff1 = function(alpha, data, estimate){
sum(digamma(data + alpha) - digamma(alpha) - data/(alpha+estimate) - alpha/(alpha+estimate) + log(alpha/(alpha+estimate)) + 1)
}
# differentiated twice
neglikdiff2 = function(alpha, data, estimate){
sum(trigamma(data + alpha) - trigamma(alpha) + data/(alpha+estimate)^2 + 1/alpha - 2/(alpha+estimate) + alpha/(alpha+estimate)^2)
}
NR_alpha = function(data,estimate){
alpha <- 1/var(data/estimate)
alphaold = alpha + 5
for(i in 1:10){
alpha = alpha - neglikdiff1(alpha, data = data, estimate = estimate)/neglikdiff2(alpha, data = data, estimate = estimate)
if(!(alpha > 0)){ alpha = runif(1,1,10)}
if(abs(alpha - alphaold) < 0.01) break
alphaold = alpha
}
return(alpha)
}
if(patient_specific){
alpha = numeric(ncol(data))
estimate = w_p%*%h_p
for(i in 1:ncol(data)){
alpha[i] = NR_alpha(data[,i],estimate[,i])
}
}else{
data = as.vector(data)
estimate = as.vector(w_p%*%h_p)
alpha = NR_alpha(data,estimate)
}
return(alpha)
}
alpha <- alphaNR3(t(SimulatedDataNBalpha200[[1]]),5)
alpha
alphaNR2(SimulatedDataNBalpha200[[1]], 5)
alphaNR2(SimulatedDataNBalpha200[[1]], 5)
remove.packages("SigMoS", lib="~/R/x86_64-pc-linux-gnu-library/4.2")
setwd("/home/au687642/Documents/Postdoc/NegBin/SigMoS/data")
load("BRCA21.rda")
BRCA21<-t(BRCA21)
save(BRCA21, "BRCA21.rda")
save(BRCA21, file="BRCA21.rda")
rm(list=ls())
load("BRCA21.rda")
rm(list=ls())
load("SimulatedDataPoisson.rda)
)
""
"
load("SimulatedDataPoisson.rda")
dim(SimulatedDataPoisson[[i]])
dim(SimulatedDataPoisson[[1]])
for (i in 1:100){
SimulatedDataPoisson[[i]] <- t(SimulatedDataPoisson[[i]])
}
dim(SimulatedDataPoisson[[1]])
dim(SimulatedDataPoisson[[99]])
save(SimulatedDataPoisson, file="SimulatedDataPoisson.rda")
rm(list=ls())
load("SimulatedDataNBalpha10.rda")
for (i in 1:100){
SimulatedDataPoisson[[i]] <- t(SimulatedDataPoisson[[i]])
}
dim(SimulatedDataPoisson[[1]])
rm(list=ls())
load("SimulatedDataNBalpha10.rda")
for (i in 1:100){
SimulatedDataNBalpha10[[i]] <- t(SimulatedDataNBalpha10[[i]])
}
dim(SimulatedDataNBalpha10[[1]])
dim(SimulatedDataNBalpha10[[99]])
load("SimulatedDataNBalpha200.rda")
dim(SimulatedDataNBalpha200[[99]])
rm(list=ls())
load("SimulatedDataNBalpha200.rda")
for (i in 1:100){
SimulatedDataNBalpha200[[i]] <- t(SimulatedDataNBalpha200[[i]])
}
dim(SimulatedDataNBalpha200[[1]])
dim(SimulatedDataNBalpha200[[99]])
save(SimulatedDataNBalpha200, file="SimulatedDataNBalpha200.rda")
rm(list=ls())
load("SimulatedDataNBn.rda")
rm(list=ls())
load("SimulatedDataNBn.rda")
for (i in 1:100){
SimulatedDataNBn[[i]] <- t(SimulatedDataNBn[[i]])
}
dim(SimulatedDataNBn[[1]])
dim(SimulatedDataNBn[[99]])
save(SimulatedDataNBn, file="SimulatedDataNBn.rda")
prova<-readRDS("../../CV_ModSel_with_NB/SimulatedDataNBalpha10.rds")
dim(prova[[1]])
rm(list=ls())
setwd("C:/Users/au543194/Desktop/Noter/NegBin_CV/CV_ModSel_with_NB")
rm(list=ls())
setwd("~/Documents/Postdoc/NegBin/CV_ModSel_with_NB/")
### Signatures ####
signatures <- read.table("SimulateWith10Signatures/COSMIC_v3.2_SBS_GRCh37.txt", header = T)
signatures = signatures[-1]
#liver <- c(1,4,5,6,12,16,17,22,23,24) #and 1 and 5
#liver_names <- paste0("SBS", liver)
#signatures_liver <- which(names(signatures) %in% liver_names)
sim_pois <- list()
sim_nb <- list()
sim_nb20 <- list()
n_datasets = 100
n_patients <- 100
n_sig = 5 # number of signatures including signature 1 and 5
alpha = 10
for (i in 1:n_datasets){
#set.seed(i+8302021)
set.seed(i+5675) # seed 2
sim_sig <- t(as.matrix(signatures[,c("SBS1","SBS5",sample(colnames(signatures)[-c(1,5)],n_sig-2))]))
#sim_sig <- t(as.matrix(signatures[,c(signatures_liver[c(1,3)],sample(signatures_liver[-c(1,3)],n_sig-2))]))
### Exposures ####
sim_exp <- matrix(rnbinom(n_patients*n_sig, mu=6000,size=1.5), nrow = n_patients)
### Data ####
V_true <- sim_exp%*%sim_sig
sim_pois[[i]] <- matrix(rpois(length(V_true), V_true), nrow = n_patients)
sim_nb[[i]] <- matrix(rnbinom(length(V_true), size = alpha, mu = V_true), nrow = n_patients)
#sim_nb20[[i]] <- matrix(rnbinom(length(V_true), size = 20, mu = V_true), nrow = n_patients)
}
dim(sim_nb[[1]])
SimulatedDataNBalpha10 <- sim_nb
setwd("~/Documents/Postdoc/NegBin/SigMoS/data/")
save(SimulatedDataNBalpha10, file="SimulatedDataNBalpha10.rda")
rm(list=ls())
load("SimulatedDataNBalpha10.rda")
dim(SimulatedDataNBalpha10[[1]])
dim(SimulatedDataNBalpha10[[99]])
devtools::install_github("MartaPelizzola/SigMoS")
library(SigMoS)
dim(BRCA21)
# Use SigMoS with the Negative Binomial distribution:
res <- sigmos(SimulatedDataNBalpha200[[1]],k=5,patient_specific = TRUE)
